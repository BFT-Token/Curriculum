[{"uri":"https://EthBuilders.github.io/Curriculum/basics/git/basics/","title":"Basics","tags":[],"description":"","content":"The Basics When starting out with git, there really is only a few commands you need to know. For the purposes of this mini-tutorial I\u0026rsquo;m assuming you have a basic understanding of how to use a shell. I highly recommend you take a brief moment to refresh yourself, or do some mini-practice (Cheat Sheet).\nThe nine basic commands you\u0026rsquo;ll need to know are:\n git config  A convenience function that is used to set Git configuration values on a global or local project level   git clone  Clones a repository into a newly created directory   git checkout  Updates files in the working tree to match the version in the index or the specified tree  Don\u0026rsquo;t worry too much about knowing what the working tree, index, or staging are just yet, although you\u0026rsquo;re more than welcome to take a deep dive     git status  Displays paths that have differences between the index file and the current HEAD commit   git add  This command updates the index using the current content found in the working tree   git commit  Create a new commit containing the current contents of the index and the given log message describing the changes   git merge  Incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch   git pull  Incorporates changes from a remote repository into the current branch   git push  Updates remote refs using local refs, while sending objects necessary to complete the given refs.    The best way to learn is through doing so follow along below to get up and running. The only requirements are that you have git, bash (or zsh/fish), a text editor, and internet.\nWalkthrough  Note: In the code blocks below user commands are denoted by the \u0026lsquo;$\u0026rsquo; prefacing the line. If a line is prefaced by a \u0026lsquo;#\u0026rsquo; it requires super user (root) access. Always take caution when running commands, especially those that require super user access, as they have the potential to damage your system.\nThe main take away: ALWAYS UNDERSTAND WHAT A COMMAND DOES BEFORE USING IT!\n Step 1: If you\u0026rsquo;ve never used git before you\u0026rsquo;ll have to do some setup. This is only necessary the first time you install git, afterwards you\u0026rsquo;ll be fine.\n$ git config --global user.name \u0026#39;[*Enter your name here*]\u0026#39; $ git config --global user.email \u0026#39;[*Enter your email here*]\u0026#39; Note: These commands setup your global identity when using git, when you work on a project it lets you and others keep track of what you did. Therefore your name and email will be available to anyone who can clone the repository.\nStep 2: Time to clone a repository, in our case we\u0026rsquo;ll just clone this one you\u0026rsquo;re reading from (how meta).\n$ git clone https://github.com/EthBuilders/Curriculum.git git-walkthrough $ cd git-walkthrough Congrats! You\u0026rsquo;re on your way, and now have officially cloned a repository.\nStep 3: Time to make sure you know how to move between branches.\nBranches in git, are kind of like separate \u0026hellip; well separate branches on a tree. Branches typically have the same roots, but they can go in separate directions and that\u0026rsquo;s okay. One key thing to remember when collaborating with others, and especially with git, is to keep your master/main branch ready and bug free. This means you should almost always work on a separate branch, and then combine your work when you are finished.\n$ git checkout -b new-branch # this command will only work if \u0026#39;new-branch\u0026#39; doesn\u0026#39;t exist, it creates a \u0026#39;new-branch\u0026#39; and then switches to it $ git checkout master # this switches back to the master branch $ git checkout new-branch # this switches back to the new-branch Step 4: Checking for changes is simple, and you should always constantly run git status to see what has been updated by you.\n$ git status Great job, it doesn\u0026rsquo;t look like anything is modified but that\u0026rsquo;s alright we\u0026rsquo;ll change that shortly.\nStep 5: Adding some changes\n$ echo \u0026#39;Hello world! My first git addition\u0026#39; \u0026gt; file.txt $ git status Your git status command should now return some more info telling you there is a new untracked file. Awesome now let\u0026rsquo;s add it.\n$ git add file.txt Step 6: Time to commit, which takes your work and definitively saves it in the project history.\n$ git commit -m \u0026#39;My first commit\u0026#39; # typically you\u0026#39;ll use git-commit without the \u0026#39;-m\u0026#39; flag, but for simplicity this\u0026#39;ll do You\u0026rsquo;ve now contributed to the history of the project, but wait no one will ever know if it\u0026rsquo;s just on your computer.\nStep 7: Time to merge your changes back onto the master branch. Remember this is where everything that is ready and good to go belongs.\n$ git checkout master # switch back to the master branch $ git merge new-branch # merges the changes from new-branch into the master branch Now both branches are equal and have the same history. BTW you can check out the history of the project by running git log.\nStep 8: Always look before you leap, I think that\u0026rsquo;s the saying. Either way it\u0026rsquo;s a good habit to check for any changes made by your peers first before pushing your changes.\n$ git pull Essentially in a nutshell, this command will sync your local copy of the repository with what\u0026rsquo;s in the cloud (or wherever your repo is stored)\nStep 9: Last but certainly not least. For projects/repos you\u0026rsquo;re allowed to make changes to this command will work. If you don\u0026rsquo;t I think it\u0026rsquo;ll fail. You should always check the repositories contributing guidlines to see any rules they may have.\n$ git push # send your changes There you go, you\u0026rsquo;ve essentially just learned the basic git workflow that many people use daily. Honestly you can go far with just knowing these nine (ten if you include git log) commands. It\u0026rsquo;s always recommended that you pick up some more along the way, but definitely get comfortable with these nine since they\u0026rsquo;re the crux of using git, and you\u0026rsquo;ll use them 99% of the time.\n"},{"uri":"https://EthBuilders.github.io/Curriculum/basics/open_source/","title":"Open Source Collaboration","tags":[],"description":"","content":"Before learning about the tools used for Open Source Collaboration, it\u0026rsquo;s best you get an idea of why they exist in the first place, and what exactly open source means. The best place to start when learning about Open Source ofcourse would be the source, pun possibly intended. The Open Source Initiative (a.k.a OSI) is a non-profit corporation which is mission-bound to educate, advocate for, and build bridges within the open source community. The OSI defines what Open Source is very clearly in the OSD (Open Source Definition) as, not just access to source code but also about 9 other criteria.\nBelow are the 10 criteria taken from the OSD:\n Free Redistribution  No restriction of any party from selling or giving away the software as a component of an aggregate software distribution Licensing shall not require a royalty or other fee   Source Code  The program must include source code, and must allow distribution in source code as well as compiled form Deliberately obfuscated source code is not allowed Intermediate forms such as the output of a preprocessor or translator are not allowed   Derived Works  The license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license   Integrity of The Author\u0026rsquo;s Source Code  The license may require derived works to carry a different name or version number from the original software Must explicitly permit distribution of software built from modified source code   No Discrimination Against Persons or Groups  Must not discriminate against any person or group of persons   No Discrimination Against Fields of Endeavor  Must not restrict anyone from making use of the program in a specific field of endeavor   Distribution of License  The rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties   License Must Not Be Specific to a Product  The rights attached to the program must not depend on the program\u0026rsquo;s being part of a particular software distribution All parties to whom the program is redistributed should have the same rights as those that are granted in conjunction with the original software distribution   License Must Not Restrict Other Software  The license must not place restrictions on other software that is distributed along with the licensed software Must not insist that all other programs distributed on the same medium must be open-source software   License Must Be Technology-Neutral  No provision of the license may be predicated on any individual technology or style of interface    Overall, participating in the Open Source ecosystem is quite simple but it is predicated on one simple rule. Always add a license to your work. Adding a license allows others to comfortably contribute/use/modify your project without fear as it protects contributors and users. Businesses and savvy developers won’t touch a project without this protection. Choosing a license isn\u0026rsquo;t that tough either thanks to tools like choosealicense.com, which helps you select a license that fits your project/needs.\nNow, there exists a litany of tools used for open source collaboration, but to start the best thing to learn first is about Source Code Management (SCM) tools. One of the biggest and most well known SCM tools is Git, and its use cases go far beyond just regular software development. It can be applied in many different areas and businesses to simplify collaboration.\n"},{"uri":"https://EthBuilders.github.io/Curriculum/basics/","title":"Basics","tags":[],"description":"","content":"Chapter 1 Development Basics Learn the basics of Markdown, Version Control, JavaScript/NodeJS, and more to kickstart your developer journey.\n"},{"uri":"https://EthBuilders.github.io/Curriculum/basics/git/","title":"Git","tags":[],"description":"","content":"Git VCS Git is a version control system (VCS), in a nutshell, git kind of works like the save functionality in a Microsoft Word document, except git is on steroids. Unlike your regular word document which only keeps a single version of your document (the one which you saved), git keeps the entire history of saves you made to your document/project. And better yet, git allows you to move around in that history like you\u0026rsquo;re a time traveler (if you ever need to be), without much complication. The real benefit to using git however, comes with the fact that it allows you to collaborate efficiently with other people/maintainers/contributors, even though you aren\u0026rsquo;t working at the same time, in the same place, or maybe don\u0026rsquo;t even have access to the internet. Before I get ahead of myself, what is a VCS (version control system)?\n Version control systems are software tools that help software teams manage changes to source code over time. Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members.\n- Atlassian\n So onto the nitty-gritty and let\u0026rsquo;s learn some basic git functionality to get you started.\n"},{"uri":"https://EthBuilders.github.io/Curriculum/basic_projects/","title":"Basic Projects","tags":[],"description":"","content":"Basic Projects A walk through of basic projects you can learn by following along.\n   Status Topic About     ⚠️ Social tokens Build a fungible ERC-20 token   ⚠️ Build a Token Farm Build a yield farming DeFi app   ⚠️ Art and non fungible tokens Build art for hype beasts   ⚠️ Build a Marketplace Build a decentralized marketplace to trade   ⚠️ TBD To be determined - open an issue or pull request    "},{"uri":"https://EthBuilders.github.io/Curriculum/protocols/","title":"Protocols","tags":[],"description":"","content":"Chapter X Protocols Legend Helpful emojis to let you know status of each section\n   Legend Description     ⚠️ UNDER DEVELOPMENT   👷 IN PROGRESS   🏗️ NEEDS HELP   ✅ DONE    DeFi Stablecoins    Status Topic About     ⚠️ Tether Stablecoin with Fiat US dollar Collateral   ⚠️ USDC Stablecoin with Fiat US dollar Collateral   ⚠️ DAI Decentralized Stablecoin with Crypto Collateral   ⚠️ AmpleForth Algorithmic Decentralized Stablecoin with no Collateral    Exchanges    Status Topic About     ⚠️ UniSwap Automatic market makers and decentralized exchanges   ⚠️ AirSwap Request for Quote and decentralized exchanges    Lending    Status Topic About     ⚠️ Compound Finance Lending Desks and interest generating protocol    Derivatives    Status Topic About     ⚠️ Synthetix Derivatives creation protocol   ⚠️ UMA Another derivatives creation protocol    "},{"uri":"https://EthBuilders.github.io/Curriculum/basics/design_patterns/","title":"Design Patterns","tags":[],"description":"","content":""},{"uri":"https://EthBuilders.github.io/Curriculum/use_ethereum/","title":"Use Ethereum","tags":[],"description":"","content":"Chapter X Use Ethereum Purpose: Provide the best and easiest to use open source materials to learn how to use Ethereum in-depth.\nWe will provide an overview from the user\u0026rsquo;s perspective.\nGoal: Have 80% of the \u0026ldquo;DeFi\u0026rdquo; by the end of March 2021.\nLegend Helpful emojis to let you know status of each section\n   Legend Description     ⚠️ UNDER DEVELOPMENT   👷 IN PROGRESS   🏗️ NEEDS HELP   ✅ DONE    Learn how to use Ethereum Learn how to interact with the protocols and tools built on Ethereum as a user.\n   Status Topic About     ⚠️ What Is Crypto? An quick explainer of crypto   ⚠️ What is Ethereum? An explaination of what is Ethereum   ⚠️ What is DeFi? An explanation of what is Decentralized Finance   ⚠️ Setup Security Best Practices Learn security tips to responsibly manage your crypto   ⚠️ MetaMask Setup Set up your MetaMask   ⚠️ MetaMask Best Practices Make your first transaction and learn best practices   ⚠️ Interacting with Protocols Quick Walkthrough with some protocols    "},{"uri":"https://EthBuilders.github.io/Curriculum/basics/front_end/","title":"Front_end","tags":[],"description":"","content":"Chapter X Front End A guide to help developers learn front end development\nIf possible we will refer you to quality external resources to avoid duplicating work.\nWhere we think we can add value, we will create quality tutorials.\nLegend Helpful emojis to let you know status of each section\n   Legend Description     ⚠️ UNDER DEVELOPMENT   👷 IN PROGRESS   🏗️ NEEDS HELP   ✅ DONE    Front End Development Basics    Status Topic About Source     ✅ HTML The most basic tool to build web pages Codecademy   ✅ CSS Basics Used to style pages Codecademy   ✅ JavaScript Basics The defacto langauge for web app user interfaces Codecademy   ✅ React 101 The leading library to build App user interfaces Codecademy   ✅ React 102 Go more in-depth with React Codecademy   ✅ NodeJS Executes JavaScript outside browser and used heavily in Ethereum Development NodeJS.Dev    Intermediate Front End Development External resources    Source Cost Source     Codecademy Freemium Interactive courses to learn software development   Free Code Camp Free An open source community helping people to learn software development   Mozilla Developer Network Free Learn the best of web development with resources for developers, by developers    "},{"uri":"https://EthBuilders.github.io/Curriculum/finance_and_economics/","title":"Finance and Economics","tags":[],"description":"","content":"Chapter X Finance and Economics Learn the basics of finance and economics.\nUnderstanding this will allow you to participate in DeFi and crypto industry more knowledgeably.\nLegend Helpful emojis to let you know status of each section\n   Legend Description     ⚠️ UNDER DEVELOPMENT   👷 IN PROGRESS   🏗️ NEEDS HELP   ✅ DONE    Fundamental Economics    Legend Description     ⚠️ What is Economics?   ⚠️ Scarcity   ⚠️ Utility   ⚠️ Preferences   ⚠️ Opportunity Cost   ⚠️ What is Value?   ⚠️ Markets and The Invisible Hand   ⚠️ Supply and Demand   ⚠️ Public Goods   ⚠️ Private Goods    Microeconomics - The Consumer    Status Topic About     ⚠️ Rational Economic Person TBD   ⚠️ Consumer Choice TBD   ⚠️ Food and Income - Engel\u0026rsquo;s Law TBD    Microeconomics - The Firm    Status Topic About     ⚠️ The Existence of Firms TBD   ⚠️ Coase Theorem TBD   ⚠️ Supply and Demand In-Depth TBD   ⚠️ Law of Demand TBD   ⚠️ Law of Supply TBD   ⚠️ The Law of Diminishing Returns TBD   ⚠️ General Equilibrium TBD   ⚠️ Elasticity and Prices TBD   ⚠️ Price Ceilings TBD   ⚠️ Price Floors TBD   ⚠️ Shortages TBD   ⚠️ Rationing TBD   ⚠️ Deadweight Loss TBD   ⚠️ Efficiency TBD   ⚠️ Sunk Cost TBD   ⚠️ Profit Maximization TBD   ⚠️ Costs in Short and Long Run TBD   ⚠️ Production and Costs TBD   ⚠️ Average Versus Marginal Costs TBD   ⚠️ Zero Marginal Costs for Information TBD   ⚠️ Externalities TBD    MicroEconomics - Industry    Status Topic About     ⚠️ Firms in Competitive Markets TBD   ⚠️ Ownership and Control of Firms TBD   ⚠️ Means of Production TBD   ⚠️ Division of Labor TBD   ⚠️ Perfect Competition TBD   ⚠️ Economies of Scale TBD   ⚠️ Monopoly TBD   ⚠️ Natural Monopoly TBD   ⚠️ Pareto Efficency TBD   ⚠️ Oligopolies TBD   ⚠️ Monopolistic Control TBD   ⚠️ Cartels TBD   ⚠️ Price Discrimination TBD   ⚠️ Network Effects TBD   ⚠️ Predation TBD   ⚠️ Advertising TBD   ⚠️ Entry Barriers TBD   ⚠️ Patents TBD   ⚠️ Taxes TBD   ⚠️ Taxing Corporations TBD   ⚠️ Consumer Surplus TBD   ⚠️ Giffen Goods TBD   ⚠️ Substitutes and Complements TBD   ⚠️ Normal and Inferior Good TBD   ⚠️ Income and Substitution TBD    Macroeconomics Fundamentals    Status Topic About     ⚠️ Aggregate Demand TBD   ⚠️ Aggregate Supply TBD   ⚠️ Labor Supply TBD   ⚠️ The Tragedy of the Commons TBD   ⚠️ Public Goods and Free Riding TBD   ⚠️ Arrow\u0026rsquo;s Impossibility Theorem TBD   ⚠️ Government Spending TBD   ⚠️ Market Cycles TBD   ⚠️ Unemployment TBD   ⚠️ The Natural Rate of Output TBD   ⚠️ Frictional Unemployment TBD   ⚠️ The Phillps Curve TBD   ⚠️ Stagflation TBD   ⚠️ Hysteresis TBD   ⚠️ Market Failure TBD   ⚠️ Government Failure TBD    Macroeconomics - International Economics    Status Topic About     ⚠️ Inflation TBD   ⚠️ Costs and Benefits of Inflation TBD   ⚠️ Demand Pull Inflation TBD   ⚠️ Cost Push Inflation TBD   ⚠️ The Cost of Living TBD   ⚠️ The Quantity Theory of Money TBD   ⚠️ Mercantalism TBD   ⚠️ Protectionism TBD   ⚠️ Free Trade TBD   ⚠️ Comparative Advantage TBD   ⚠️ Trade and Geography TBD   ⚠️ The Gold Standard TBD   ⚠️ Bretton Woods System TBD   ⚠️ Currency Pegs TBD   ⚠️ Fixed Versus Floating Exchange Rates TBD   ⚠️ The Balance of Payments TBD   ⚠️ Trade Deficits TBD   ⚠️ Globalization and Market Integration TBD   ⚠️ Foreign Exchange Markets (FOREX) TBD   ⚠️ Real and Nominal Exchange Rates TBD   ⚠️ International Capital Flows TBD   ⚠️ Currency Crises TBD   ⚠️ Single Currencies TBD   ⚠️ Exchnage Rate Depreciation TBD   ⚠️ Trade Wars TBD   ⚠️ Economics and Ethics TBD   ⚠️ Fair Trade TBD   ⚠️ Multinational Firms TBD   ⚠️ Labor Migration TBD   ⚠️ Institutions and Property Rights TBD   ⚠️ Financial Bubbles TBD   ⚠️ Financial Crises TBD   ⚠️ Credit Crunches TBD   ⚠️ Financing Firms TBD   ⚠️ Forecasting TBD   ⚠️ Gross Domestic Product (GDP) TBD   ⚠️ Real Versus Nominal GDP TBD   ⚠️ The Circular Flow of Income TBD    Finance and Financial Economics    Status Topic About     ⚠️ What is Finance? The study of the management of money   ⚠️ Risk and Reward TBD   ⚠️ Time value of money The most basic tool to build web pages   ⚠️ Interest TBD   ⚠️ Interest Rates TBD   ⚠️ Equity TBD   ⚠️ Debt TBD   ⚠️ The Role of Money TBD   ⚠️ The Demand for Money TBD   ⚠️ Fiat and Commodity Money TBD   ⚠️ Money Supply TBD   ⚠️ Money Creation TBD   ⚠️ Seigniorage TBD   ⚠️ Inflation TBD   ⚠️ Real Prices TBD   ⚠️ Nominal Prices TBD   ⚠️ Bonds TBD   ⚠️ The Yield Curve TBD   ⚠️ Banks and Financial Intermediation TBD   ⚠️ Fractional Reserve Banking TBD   ⚠️ Bank Runs TBD   ⚠️ Stocks TBD   ⚠️ The Stock Market TBD   ⚠️ Capital Asset Pricing Model (CAPM) TBD   ⚠️ Derivatives TBD   ⚠️ Insurance TBD    Economics To Sort    Status Topic About     ⚠️ Market Efficiency and the Welfare Theorems TBD   ⚠️ Risk Aversion TBD   ⚠️ Adverse Selection TBD   ⚠️ Signalling and Screening TBD   ⚠️ Auctions and the Winner\u0026rsquo;s Curse TBD   ⚠️ Searching and Matching TBD   ⚠️ Game Theory TBD   ⚠️ Prisoners' Dilemma TBD   ⚠️ Win- Win TBD   ⚠️ Behaviour Economics TBD   ⚠️ The Allais Paradox TBD   ⚠️ The Fisher Effect TBD   ⚠️ Tobin\u0026rsquo;s Q - Investment and The Stock Market TBD   ⚠️ The Efficent Market Hypothesis TBD   ⚠️ Investment TBD   ⚠️ Consumption TBD   ⚠️ Liqudity Trap TBD   ⚠️ HyperInflation TBD   ⚠️ Rational Expectations TBD   ⚠️ Life Cycle and Permenant Income TBD   ⚠️ Keynesian Economics TBD   ⚠️ Keynesian Multiplier TBD   ⚠️ Government Spending and Economy Stabalizers TBD   ⚠️ Theory of Money Neutrality TBD   ⚠️ Politics and the Business Cycle TBD   ⚠️ Demand for Labor TBD   ⚠️ Efficiency Wage Theory TBD   ⚠️ Wage and Price Rigidity TBD   ⚠️ The Housing Market TBD   ⚠️ GDP and Happiness TBD   ⚠️ Stabilization Polices TBD   ⚠️ Monetary Policy TBD   ⚠️ Quantitative Easing TBD   ⚠️ Fiscal Policy TBD   ⚠️ Policy Discretion TBD   ⚠️ Montetarism TBD   ⚠️ Inflation Targeting TBD   ⚠️ Lucas Critiques TBD   ⚠️ Government Spending and Crowding Out TBD   ⚠️ Supply Side Economics TBD   ⚠️ Laffer Curve TBD   ⚠️ Ricardian Equivalence TBD   ⚠️ Central Banks TBD   ⚠️ Budget Deficit and Surplus TBD   ⚠️ Balanced Budget TBD   ⚠️ Government Debt TBD   ⚠️ Tax Incidence TBD   ⚠️ Direct Taxation TBD   ⚠️ Indirect Taxation TBD   ⚠️ Deadweight Loss of Taxation TBD   ⚠️ Lump-Sum Taxes TBD   ⚠️ Redistributive Taxes TBD   ⚠️ The Welfare State TBD   ⚠️ Pensions TBD   ⚠️ Price Controls and Subsidies TBD   ⚠️ Minimum Wage TBD   ⚠️ Competetion Policy TBD   ⚠️ Regulation TBD   ⚠️ Taxing Pollution TBD   ⚠️ Quality of Life, Values and Economics TBD   ⚠️ Marxist Economics TBD   ⚠️ The Labor Theory of Value TBD   ⚠️ Central Planning TBD   ⚠️ The Social Market TBD   ⚠️ Social Market TBD   ⚠️ Trade Unions TBD   ⚠️ Economic Liberalism TBD   ⚠️ Social Capital TBD   ⚠️ Economic Growth TBD   ⚠️ Productivity and Living Standards TBD   ⚠️ Economic Converngence TBD   ⚠️ Endogenous Growth TBD   ⚠️ Technology and Growth TBD   ⚠️ Population Growth TBD   ⚠️ Industrialization TBD   ⚠️ Creative Destruction TBD   ⚠️ Development Economics TBD   ⚠️ Poverty TBD   ⚠️ Debt Relief TBD   ⚠️ Depedency Theory TBD   ⚠️ Middle Income Trap TBD   ⚠️ Inequality and Growth TBD   ⚠️ Human Capital TBD   ⚠️ Informal Economy TBD   ⚠️ Gray Captial TBD   ⚠️ Dead Captial TBD   ⚠️ Non-Renewable Resource TBD   ⚠️ Environmentalism and Economics TBD    International Economics "},{"uri":"https://EthBuilders.github.io/Curriculum/glossary/","title":"Glossary","tags":[],"description":"","content":"Glossary 📖 A glossary for common terms in Ethereum and cryptocurrencies.\nSubmitting terms ✍️ 👷 This is a great place to get started in open source.\n⏲️ Just five mins can make a huge impact at scale.\nTo add terms, make a pull request for review.\nSee our CONTRIBUTING.md.\nLegend Helpful emojis to let you know status of each section.\n   Legend Description     ⚠️ UNDER DEVELOPMENT   👷 IN PROGRESS   🏗️ NEEDS HELP   ✅ DONE    Table 0-9\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\nSpecial Symbols\n0-9    Legend Term Description     👷 51% Attack When a miner or group of miners control greater than 50% of the network\u0026rsquo;s mining hash rate.    A    Legend Term Description     👷 Absolute Advantage An economics concept in which one party has a direct efficency advantage in producing/providing a specific good/service over another party.   👷 Active Management An investing strategy employed by fund managers aiming to outperform an market index in order to generate profits.   👷 Ad Hoc A Latin phrase used in English to mean something created when necessary, in the moment, or improvised for a specific purpose. Similar to impromptu.   👷 Address A string of hexidecimals that designates the location on a blockchain network. Usually meant to be only used once.   👷 Airdrop A form of distributing digital assets to the public. Usually distributed to current token holders, addresses that have interacted with a specific protocol or by being an active address on a blockchain.   👷 AirSwap TBD   👷 Algorithm A sequence of unambigious instructions, or set of rules, used for the purpose of solving a problem.   👷 All or None Order (AON) An order which one place, must either be filled completly or not at all. This prevents any partial filing of orders.   ⚠️ All-Time High (ATH) The highest price a of a cryptocurrency or asset in a qoute currency, such as US Dollar, BTC, or ETH.   ⚠️ Allocation The portion of tokens or equity, that may be earned, purchased, or set aside for certain entities or activites. These entities can be investors, teams, organizations, or communities.   ⚠️ Alpha (software) The first look at a product in a very basic form released by a team. Often used in software industry.   ⚠️ Alpha (finance) The difference between a market\u0026rsquo;s index (or a representative benchmark) and an investment\u0026rsquo;s return. Used to assess the performance of an investment in an active strategy.   ⚠️ Altcoin Used to describe a cryptocurrency that is not Bitcoin.   ⚠️ Anti Money Laundering (AML) The legal and regulatory procedures designed to prevent criminals from disguising illegally generated funds as legitimate income.   ⚠️ Application Programming Interface (API) An abstracted interface that allows users to interact with an application or service programmatically.   ⚠️ Application-Specific Integrated Circut (ASIC) A customized integrated circuit (aka chip) designed for maximum performance in a specific area instead of general computation. Usually used to create customized mining equipment for Bitcoin or other cryptocurrency networks to maximize rewards through increased hash power.   ⚠️ Arbitrage Buying and selling an asset in different markets to profit from the price difference. Buy low in one market, sell at a higher price in another.   ⚠️ ASIC-resistant A cryptocurrency whose procotol mining algorithm is configured to remove any advantage from using ASIC machines when compared to GPU mining. Usually works by inflating the information in RAM taking advantage of the narrow link between memory and CPU. An example can be seen with Monero or Ethereum.   ⚠️ Ask Price The price a seller is willing to accept on their sell order when trading an asset. Also known as the offer price.   ⚠️ Asset Management A system that helps individual or companies manage assets, either for their client or for themselves.   ⚠️ Asynchronous Events in a system that do not happen in linear (synchronous) order, or events that can occur independently of the main process flow.   ⚠️ Atomic Swap An smart contract that allows tokens to be traded peer-to-peer without the need for a trusted third party, usually via escrow contracts and Hash timelock contracts (HCTL). They are atomic because they either are completed or not.   ⚠️ Attack surface Areas in a software environment where an attacker can exploit its system. Successful attacks vectors are called exploits.   ⚠️ Auction A public sale where goods, assets or services are sold to the highest bidder through a bidding process.   👷 Automated Market Maker (AMM) Automated market makers are smart contracts that create a liquidity pool of ERC20 tokens, which are automatically traded by an algorithm rather than an order book. This effectively replaces a traditional limit order-book with a system where assets can be automatically swapped against the pool’s latest price.   There are two main types of automated market makers. One may be governed and set up by professional market makers, and the other is fully automated by an algorithm, allowing any user in the market to participate by depositing liquidity into the smart contract.      B    Legend Term Description     ⚠️ Bag A portfolio of assets, usually cryptocurrency tokens.   ⚠️ Bear Market A negative trend in a market\u0026rsquo;s price.   ⚠️ Benchmark A measurement standard used to gauge the perfomance of an investment or portfolio.   ⚠️ Beta coefficient (finance) A measure of a stock\u0026rsquo;s volatility in relation to the overall market. Simply, its a measure of how an asset moves on average when the overall stock market increase or decreases.   👷 Beta (software) software refers to computer software that is undergoing testing that hasn\u0026rsquo;t been officially released. It\u0026rsquo;s software in development between the alpha phase and the release phase. It\u0026rsquo;s generally considered \u0026ldquo;complete\u0026rdquo; by the developer that is not ready for general use due to a lack of testing.   👷 Bid price The price that a prospective buyer is prepared to pay for a securities or other asset. A bid price is generally arrived at through a process of negotiation between the seller and buyer. Prices are designed to a desirable outcome from the entity making the bid. When multiple buyers bid, it can develop into a bidding war; eventually, the price becomes settled when a buyer makes an offer which a rival is unwilling to top. In the context of stock trading, the bid price refers to the highest amount of money a prospective buyer is willing to spend on it.   ⚠️ Bid-ask spread TBD   ⚠️ Bitcoin An immutable and trustless ledger made up of a decentralized network of nodes to manage and issue a global digital currency that mimics gold\u0026rsquo;s property of scarcity via a hard limit of 21 million coins. Explicitly it is used as a store of value by mimicking the properties of money. It is the first successful attempt at issuing decentralized currency, non-fiat, non-state actor currency which solves the double-spend problem.   👷 Bitcoin core Bitcoin Core consists of both “full-node” software for fully validating the blockchain as well as a bitcoin wallet. Bitcoin Core is programmed to decide which blockchain contains a valid transaction. Users of Bitcoin Core only accept transactions for that blockchain, making it the Bitcoin blockchain that everyone else to use. The open-source project maintains and releases Bitcoin client software called “Bitcoin Core”; which is the descendant of the original Bitcoin software client by Satoshi Nakamoto after publishing the Bitcoin whitepaper.   ⚠️ Bitcoin dominance TBD   ⚠️ Bitcoin Improvement Proposals (BIPS) TBD   ⚠️ Blockchain TBD   ⚠️ Block explorer TBD   ⚠️ Block Header TBD   ⚠️ Block Height Number of blocks that have been currently mined since genesis   ⚠️ Block Reward Amount of token reward miners get per block successfully mined   ⚠️ Black swan TBD   ⚠️ Bond TBD   ⚠️ Bot TBD   ⚠️ Bounty TBD   ⚠️ Brute Force Attack TBD   ⚠️ BTD/BTFD (Buy the Fu@*ing Dip) Captitalizing on the price drop of an asset because its fundamentals merits future apperciation in value.   👷 Bull Market A bull market is a term that describes the condition of a financial market in which prices are rising or expected to rise. This term usually refers to the stock market, but can be applied to anything traded. Included are bonds, real estate, commodities, and cryptocurrencies.   Since prices continuously rise and fall during trading, the classification of \u0026ldquo;bull market\u0026rdquo; is reserved for extended amounts of time where a large portion of prices are rising.     👷 Bull Trap A bull trap is a signal that proves to be false by indicating that a decreasing trend in a stock or index has reversed and is starting upward. However, the trend continues going down. Traders acting on this buy signal can be trapped and generate losses on long positions.   ⚠️ BUIDL TBD   ⚠️ Bull Market TBD    C    Legend Term Description     ⚠️ Candlestick Chart (Technical Analysis) TBD   ⚠️ Candidate Block TBD   ⚠️ Capitulation TBD   ⚠️ Central Bank Digital Currency (CBDC) TBD   ⚠️ Censorship-resistance TBD   ⚠️ Centralization TBD   ⚠️ Central Bank TBD   ⚠️ Central Processing Unit TBD   ⚠️ Centralized TBD   ⚠️ Cipher TBD   ⚠️ Circulating Supply TBD   ⚠️ Cloud TBD   ⚠️ Coin TBD   ⚠️ Coinbase (Bitcoin) The transaction that rewards a miner with the block reward and any transaction fees for their work on the Bitcoin network.   ⚠️ Colocation TBD   ⚠️ Collateral TBD   ⚠️ Commodity Futures Trading Commission TBD   ⚠️ Commit TBD   ⚠️ Confluence TBD   ⚠️ Confirmation TBD   ⚠️ Consumer Price Index (CPI) TBD   ⚠️ Consensus TBD   ⚠️ Contract Address TBD   ⚠️ Commodity Futures Trading Commission TBD   ⚠️ Credentials TBD   ⚠️ Cold Wallet Wallet kept completely offline. Similar concept to \u0026lsquo;air-gapping\u0026rsquo; sensitive computers   ⚠️ Correction TBD   ⚠️ Cryptocurrency TBD   ⚠️ Cryptography TBD   ⚠️ Crypto Twitter TBD   ⚠️ Cypherpunks An online internet movement started in the late 1980s, which advocated the widespread use of strong cryptography and privacy-enhancing technologies to aid in social and political change. Achievement of its members includes the creation of SSL, BitTorrent, Bitcoin, smart contracts and more. Also a sub-genre within science fiction.   ⚠️ Custody TBD    D    Legend Term Description     ⚠️ Daemon TBD   ⚠️ DAI TBD   👷 Dead Cat Bounce A short-lived recovery in the price of a declining stock.   ⚠️ Decentralized Application (DApp) TBD   👷 Decentralized Autonomous Organization (DAO) DAO stands for Decentralized Autonomous Organization, a system of hard-coded rules that define actions a decentralized organization will take. DAO\u0026rsquo;s are open source code operated entirely by its community. The underlying structure and working mechanisms of a DAO aren\u0026rsquo;t based on any kind of hierarchical management. No single entity is in charge, nor any directory board and, no centralization of power. DAOs are conducted by smart contracts that are governed by the collective work of its contributors and community members by enabling the creation of a more efficient system reducing the need for human input, overall costs, and risk related to human behavior. Allowing for activities to be executed in a completely decentralized, automated manner is what makes a DAO useful and interesting concept.   ⚠️ Decentralized Exchange (DEX) TBD   ⚠️ Decentralized Finance (DeFi) TBD   ⚠️ Decryption TBD   ⚠️ Deep Web TBD   ⚠️ Design Flaw Attack TBD   ⚠️ Design Thinking TBD   ⚠️ Difficulty TBD   ⚠️ Difficulty Bomb TBD   ⚠️ Diversification TBD   ⚠️ Dollar Cost Averaging TBD   👷 Double Spending One of the primary concerns of any cryptocurrency developer is the issue of double-spending.This refers to the incidence of an individual spending a balance of that cryptocurrency more than once, effectively creating a disparity between the spending record and the amount of that cryptocurrency available, as well as the way that it is distributed.The issue of double-spending is a problem that cash does not have; A technical issue that arises with the notion of a digital currency is the ability for somebody to duplicate the digital money and spend it simultaneously at two or more places.This \u0026lsquo;double-spend\u0026rsquo; problem is prevented in blockchain-based cryptocurrencies such as Bitcoin by using a consensus mechanism known as proof-of-work (PoW).   ⚠️ Distributed ledger technology TBD    E    Legend Term Description     ⚠️ Efficient Market Hypothesis TBD   ⚠️ Elliptic Curve Cryptography TBD   ⚠️ Ethereum TBD   ⚠️ Ethereum Enterprise Alliance (EEA) TBD   ⚠️ Ethereum Foundation TBD   ⚠️ ERC-20 TBD   ⚠️ ERC-721 TBD   ⚠️ ERC-1569 TBD   ⚠️ Exchange TBD    F    Legend Term Description     ⚠️ Fakeout    ⚠️ Falling Knife    ⚠️ Fear of Missing Out (FOMO)    ⚠️ Fear, Uncertainty and Doubt (FUD)    ⚠️ FUDDING Creating fear, uncertainty and doubt   ⚠️ Fiat    ⚠️ Filecoin    ⚠️ Finality    ⚠️ First Mover Advantage    ⚠️ Fiscal Policy    ⚠️ Flippening    ⚠️ Forced Liquidation    ⚠️ Forex (FX)    ⚠️ Forced liquidation    ⚠️ Formal Verification    ⚠️ Full Node    ⚠️ Fundamental Analysis    ⚠️ Fungibility    ⚠️ Futures Contract     G    Legend Term Description     ⚠️ Gas TBD   ⚠️ Gas Limit TBD   ⚠️ General Public License (GPL) TBD   ⚠️ Genesis Block TBD   ⚠️ Git TBD   ⚠️ GitHub TBD   ⚠️ Gossip Protocol TBD   ⚠️ Gwei TBD    H    Legend Term Description     ⚠️ Hacker TBD   ⚠️ Haha Money Printer Go BRRRRRR A meme circulating in 2020 is making fun of the United States Federal Reserves policy of quantitative easing, aka printing money out of thin air.   ⚠️ Halving    ⚠️ Hard Cap    👷 Hash The output produced by a hash function. Also known as a digest, hash value, or hash code   👷 Hash function Any function used to map data of an arbitrary size to fixed-size value. Usually, it is deterministic, one way and returns a hexidecimal number output.   👷 Hash Rate The speed at which a computer or mining hardware calculates new hashes. Measured in hashes per second.   ⚠️ Hashed TimeLock Contract    ⚠️ HODL Hold on for dear life. Originally a typo of \u0026lsquo;HOLD\u0026rsquo; originating from bitcointalk forum urge users to retain bitcoin ownership and not sell.   ⚠️ Honeypot     I    Legend Term Description     ⚠️ Iceberg Order A single large order that has been split into smaller limit orders to conceal the actual order quantity. Usually done through the use of an automated program.   ⚠️ Immutability    ⚠️ Index    ⚠️ Initial Coin Offering (ICO)    ⚠️ Initial Exchange Offering (IEO)    ⚠️ Initial Public Offering (IPO)    ⚠️ Integrated Circuit    ⚠️ Interoperability    👷 InterPlanetary File System (IPFS) A peer-to-peer hypermedia protocol developed as a decentralized alternative to HTTP. It allows for storage and access to data (from single files to whole websites) on a peer-to-peer network, reducing the potential for central point of failure and censorship.   👷 InterPlanetary File System (IPFS) Gateway A program that provides a workaround to deliver content stored on IPFS to applications that do not yet support IPFS natively.   ⚠️ IOU    ⚠️ Isolated Margin    ⚠️ Issuance     J    Legend Term Description     ⚠️ J-Curve TBD   ⚠️ J-Curve Effect TBD   ⚠️ Joint Stock Company TBD   ⚠️ Junk Bond TBD   ⚠️ Just In Time (JIT) TBD    K    Legend Term Description     👷 Keccak is a versatile cryptographic function known as a hash function, it\u0026rsquo;s also used for authentication, (authenticated) encryption and pseudo-random number generation. Its structure is the extremely simple sponge construction and internally it uses the innovative Keccak-f cryptographic permutation.   ⚠️ Know Your Customer (KYC) TBD    L    Legend Term Description     ⚠️ Latency TBD   ⚠️ Law of Demand TBD   ⚠️ Law of Supply TBD   ⚠️ Layer 2 TBD   ⚠️ Ledger TBD   ⚠️ Library TBD   ⚠️ Lightning Network TBD   ⚠️ Linux TBD   ⚠️ Liquidity TBD   ⚠️ Listing TBD    M    Legend Term Description     ⚠️  TBD   ⚠️ Mainnet TBD   ⚠️ Mainnet Swap TBD   ⚠️ Maker TBD   ⚠️ Malware TBD   ⚠️ Margin Trading TBD   ⚠️ Market Capitalization TBD   ⚠️ Market Momentum TBD   ⚠️ Market Order TBD   ⚠️ Masternode TBD   ⚠️ Maximum Supply TBD   ⚠️ Mempool TBD   ⚠️ Merged Mining TBD   ⚠️ Merkle Tree TBD   ⚠️ Metadata TBD   ⚠️ Mining TBD   ⚠️ Mining Farm TBD   👷 Modern Porfolio Theory A theory for how to construct a portfolio with investments to maximize returns and maintain a level of acceptable market risk. It assumes that a portfolio can have lower risk based on the diversification and lower correlation of the portfolio’s investments.   ⚠️ Monetary Policy TBD   ⚠️ Moon TBD   ⚠️ Multisignature TBD    N    Legend Term Description     ⚠️ Node TBD   ⚠️ Non-fungible Token (NFT) TBD   👷 Nonce A nonce is an abbreviation for \u0026ldquo;number only used once,\u0026rdquo; which is a number added to a hashed—or encrypted—block in a blockchain that, when rehashed, meets the difficulty level restrictions. The nonce is the number that blockchain miners are trying to find. The first miner to do so receives the cryptocurrency reward.    O    Legend Term Description     ⚠️ Off-chain TBD   ⚠️ Offshore Account TBD   ⚠️ One cancels the Other Order TBD   ⚠️ Open-Source Software (OSS) TBD   ⚠️ Oracle TBD   ⚠️ Order Book TBD   ⚠️ Orphan Block TBD    P    Legend Term Description     ⚠️ Paper Wallet TBD   ⚠️ Passive Management TBD   ⚠️ Peer-to-Peer (P2P) TBD   ⚠️ Pegged Currency TBD   ⚠️ Phishing TBD   ⚠️ Plasma TBD   ⚠️ Ponzi Scheme TBD   ⚠️ Price Action TBD   ⚠️ Prisoner\u0026rsquo;s Dilemma TBD   ⚠️ Private Key TBD   ⚠️ Private Sale TBD   ⚠️ Progressive Web Application (PWA) TBD   ⚠️ Pseudorandom TBD   ⚠️ Public Key TBD    Q    Legend Term Description     ⚠️ Quadratic Voting TBD   ⚠️ Quantum Computing TBD    R    Legend Term Description     ⚠️ Race attack TBD   ⚠️ Ransomware TBD   ⚠️ Rekt TBD   ⚠️ Resistance TBD   ⚠️ Return on Investment (ROI) TBD   ⚠️ RoadMap TBD   ⚠️ Routing Attack TBD    S    Legend Term Description     ⚠️ SAI TBD   ⚠️ Satoshi TBD   ⚠️ Satoshi Nakamoto TBD   ⚠️ Scribble Scribble transforms existing contracts into contracts with equivalent behaviour, except that they also check properties. With these instrumented contracts, you can use testing, fuzzing or symbolic execution to check if your properties can be violated.   ⚠️ Secure Asset Fund for Users (SAFU) TBD   ⚠️ Securities and Exchange Commission (SEC) TBD   ⚠️ Security Audit TBD   ⚠️ Seed Phrase TBD   👷 Seed round Considered the earliest offical round of financing for a startup, in which the main sources of capital are typcially angel investors or institutions specialized in seed funding - corporate or venture capitial seed funds, accelerators, institutional crowdfunding platforms. Financing amount can typically range from $100 thousand to $5 million. Startups in seed round generally have validated a proof of concept or MVP to have a fit in the market, and have idenified the requirements (e.g., skillset, technology, partnerships) to build out the product.   ⚠️ Segregated Witness (SegWit) TBD   👷 Selfish Mining a miner or group of miners increases their revenue by strategically withholding and releasing blocks to the network. Typically, a miner will announce a block as soon as they find it. If the block is confirmed, they get a reward for the block.   The goal of shelfish mining is to remain at least one block ahead of the network. Nodes accept the chain with the most accumulated proof of work as a valid blockchain. Anytime, the selfish miner can reveal their chain is longer than the one followed by the rest of the network, the existing blocks are discarded and the transaction becomes reversed. The miner then collects the reward and cause other parties to waste their resources.     ⚠️ Sell Wall TBD   ⚠️ Sentiment TBD   👷 Series A Financing round that occurs after a seed round and is often the first round in which venture capital investors are involved. This round can include multiple investors, in which one typically leads the process and receives a higher amount of equity/ownership level in return. Financing amount can have a large range from $10 million to even a few billion depending on the startup\u0026rsquo;s offerings and industry. Startups at Series A generally have a completed product, established userbase, and revenue generation, and seek funding to support further product and/or business model development, cover costs of production or market expansion prior to becoming revenue financed.   👷 Series B Financing round that occurs after the Series A round and involves similar type of investors and similar process. Startups at Series B have validated the product-market fit, established business operations, and have a growing customer base. Startups in this financing round generally seek financing to scale up business operations, hire additional staff, and tackle growing competition.   👷 Series C Financing round that occurs after a Series B, involves venture capital firms, and is typically the last round of private equity financing, though additional rounds may occur prior to an IPO. The process takes the same form as Series B - one venture capital fund leading the process that can involve multiple other venture capital funds. Startups in this financing round are generally successful in with their current offerings and current market, and seek funding to develop new offerings, expand into new markets, or acquire new businesses.   👷 Sharpe Ratio A metric to understand the performance (rate of return) associated to risk of a portfolio or asset. It assumes that there is a risk free rate of return available, such as the yield for a US Treasury bond. It also assumes that volatility of rate of return (represented as a standard deviation) is equal to risk. It is calculated by subtracting the risk free rate of return from the total rate of return and dividing by the standard deviation of the expected rate of return. A lower Sharpe ratio indicates performance due to higher risk and a higher Sharpe ratio indicates performance due to lower risk. When comparing portfolios and assets, those with a higher Sharpe ratio are considered favorable as their returns come from good investment rather than high risk.   ⚠️ Smart Contract TBD   ⚠️ Snapshot TBD   ⚠️ Snapshot (Tool) TBD   ⚠️ Source Code TBD   ⚠️ Stablecoin TBD   ⚠️ Staking TBD   ⚠️ Staking Pool TBD   ⚠️ State Channel TBD   ⚠️ Store of Value TBD   ⚠️ Supply Chain TBD   ⚠️ Support (Technical Analysis) TBD    T    Legend Term Description     ⚠️ Taker TBD   ⚠️ Tank TBD   ⚠️ Ticker TBD   ⚠️ Token TBD   ⚠️ Token Lockup TBD   ⚠️ Token Sale TBD   ⚠️ Total Supply TBD   ⚠️ Transaction ID (TXID) TBD   ⚠️ Transaction Hash TBD   ⚠️ Transaction Hash TBD   ⚠️ Transactions Per Section (TPS) TBD   ⚠️ Trustless TBD   ⚠️ Turing Complete TBD    U    Legend Term Description     ⚠️ Unit of Account TBD   ⚠️ User Experience (UX) TBD   ⚠️ User Interface (UI) TBD   ⚠️ Unspent Transaction Output (UTXO) TBD    V    Legend Term Description     👷 Venture Capital A form of private equity financing in which institutional investors or high net worth individuals provide an investment to a entrepreneur or startup in return for some level of equity or ownership of the venture. In the blockchain space, ownership can be in the form of traditional stock \u0026amp; cap tables or can be in the form of token distribution models. The investment provided by the VC entity is typically monetary but can also be non-monetary such as technical or managerial support. The goal of venture capital is to provide early stage venture (i.e., high risk) with the capital necessary to build and scale in return of potential high reward.   ⚠️ Virtual Machine TBD   ⚠️ Volatility A measure of the price fluctuations or rate of return over a time period of an asset or portfolio. Modern Portfolio Theory assumes that volatility is equal to risk - higher volatily means higher risk.   ⚠️ Volume A measure of how much an asset is exchanged over a period of time. This measurement can be in the form of the number of shares of an asset exchanged or the value of the number assets exchanged. In crypto, volume is generally presented as the value of the number of cryptocurrency assets exchanged, with value represented as either US Dollar, Bitcoin, or Ethereum.    W    Legend Term Description     ⚠️ Wallet TBD   ⚠️ Weak Hands TBD   ⚠️ Weak Subjectivity TBD   ⚠️ Web 1.0 TBD   ⚠️ Web 2.0 TBD   ⚠️ Web 3.0 TBD   ⚠️ Wei TBD   ⚠️ Whale TBD   ⚠️ Whiskers TBD   ⚠️ Whitelist TBD   ⚠️ Wrapped Ether (WETH) TBD   ⚠️ Wick (Technical Analysis) TBD    X    Legend Term Description     ⚠️ XML (Extensible Markup Language) TBD    Y    Legend Term Description     ⚠️ Yearn Finance TBD   ⚠️ Yield TBD   ⚠️ Yield Farming TBD    Z    Legend Term Description     ⚠️ Zero-Knowledge Proofs TBD   ⚠️ ZK-Snarks TBD    Special Symbols    Legend Term Description     ⚠️ ! TBD    "},{"uri":"https://EthBuilders.github.io/Curriculum/","title":"","tags":[],"description":"","content":"Ethereum Developer Curriculum An Open Source Curriculum to learn about Ethereum Development.\nPurpose: Provide the best and easiest to use open source materials to learn Ethereum development in-depth.\nCurrently a work in progress site.\n "},{"uri":"https://EthBuilders.github.io/Curriculum/basic_projects/yield_farm/","title":"","tags":[],"description":"","content":"Chapter X 👨‍🌾 EthBuilders Yield Farming - IN PROGRESS Learn about yield farming by building a farm in a hands-on manner.\nAbout EthBuilders Our purpose is to provide the best open source materials to learn Ethereum development in-depth.\nA special thanks to ConsenSys Developer Portal and Dapp University.\nTable of Contents  👨‍🌾 EthBuilders Yield Farming - IN PROGRESS  About EthBuilders Table of Contents What is Yield Farming?  History How does it work?  Staking     Project Setup  Installing NodeJS Creating the Folder Set Up package.json Installing Truffle And its Dependencies  What is Truffle? Installing locally vs globally Install Truffle Installing Ganache Initalize Truffle a Project   Quick Start Setup   Understanding the Project Structure Truffle Project Structure  Overview of package.json  What is package-lock.json? What is node_modules   Configurations with truffle.config.js Contracts and Migrations Overview of Migrations Scripts Tests and Test Driven Development  Security and The Importance of Tests ./test        What is Yield Farming? 👨‍🌾 Yield Farming is \u0026hellip;.\nYield can be defined as \u0026hellip;\nIt is also known as \u0026ldquo;liquidity mining\u0026rdquo;.\nLiquidity is defined as \u0026hellip;\nStaking is defined as \u0026hellip;\nYield farming and staking are two sides of the same coin\nHistory Yield Farming was first created by Synthetix, a derivatives liquidity protocol. It was later popularized by Compound Finance, a lending desk protocol and Balancer, a protocol for programmable liquidity.\nHow does it work? Yield Farming is a way to direct capital to active network members who are building the protocol, instead of relying on mere airdrops.\nIt can be considered a growth hack as it is designed to incentivize liquidity on a protocol. This brings in suppliers and users.\nStaking To gain a yield one has to stake.\nProject Setup  Install NodeJS Create a folder for the project Install Truffle Initialize a Truffle workplace  Want a quick setup? Go click on Quick Start Setup\nInstalling NodeJS NodeJS is the preferred runtime environment to create develop DApps.\nIt comes with npm, node\u0026rsquo;s package manager. With npm, we can install all sort of programs and code snippets developed by the community to make our lives easier.\nMake sure you have NodeJS installed.\nThe follow command checks for NodeJS on your system.\nnode -v\n$ node -v v10.17.0  Any version above v10.0 will do\n If you don\u0026rsquo;t see Node on your system:\n Go to the website Install the long term support version (LTS).  Creating the Folder Create a folder for your project and enter the folder.\n$ mkdir yield-farm $ cd yield-farm Set Up package.json To install Truffle and any project dependencies, we first have to intialize a package.json file.\npackage.json stores your dependencies in the /node modules directory.\nCheck that you are in the project folder.\n pwd means print working directory, the root directory your terminal is in.\n $ pwd $ pwd /YOUR/ABSOLUTE/PATH/VARIES/yield-farm In the root of your folder, initialize npm and create a package.json file.\n The -y flag allows the quick setup of a default package.json without all the usual setup questions.\nYou can go back and fill in the fields if you\u0026rsquo;d like.\n $ npm init -y $ npm init -y Wrote to /YOUR/ABSOLUTE/PATH/VARIES/yield-farm/package.json: { \u0026#34;name\u0026#34;: \u0026#34;yield-farm\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34; } Installing Truffle And its Dependencies What is Truffle? Truffle is an environment that to develop DApps and smart contracts on Ethereum.\nOr as the website states, its a \u0026ldquo;world class development environment, testing framework and asset pipeline for blockchains using the Ethereum Virtual Machine (EVM), aiming to make life as a developer easier\u0026rdquo;.\nInstalling locally vs globally We will be installing all of our /node modules into the local project. It is recommended to install locally instead of globally, because tools in the Ethereum ecosysetm change quickly.\nInstall Truffle To install Truffle run the following command\n$ npm install truffle@5.1.59 --save-dev  \u0026ndash;save-dev installs truffle as a dev dependencies\n  truffle@5.1.59 installs that specific package version\nHaving the same version reduces the chance that a truffle update\ncreates a breaking change that may cause issues\n $ npm install truffle@5.1.59 --save-dev \u0026gt; truffle@5.1.59 postinstall /YOUR/ABSOLUTE/PATH/VARIES/yield-farm/node_modules/truffle \u0026gt; node ./scripts/postinstall.js - Fetching solc version list from solc-bin. Attempt #1 npm notice created a lockfile as package-lock.json. You should commit this file. npm WARN yield-farm@1.0.0 No description npm WARN yield-farm@1.0.0 No repository field. + truffle@5.1.59 added 144 packages from 66 contributors and audited 144 packages in 31.025s 37 packages are looking for funding run `npm fund` for details found 0 vulnerabilities Installing Ganache Next we install Ganache, a tool to test our project on a local Ethereum blockchain.\nGanache comes in two flavors:\n Ganache-cli - a command line interface Ganache GUI - a graphical user interaface  For this project will be using the Ganache-cli. If you\u0026rsquo;d like, you can install both. Again we will install the tool locally as a dev dependency as opposed to global.\n A dev dependency is a module of code that is not used in the app directly, but used to support development.\n To install Ganache-cli we run:\n$ npm install ganache-cli@6.12.1 --save-dev $ npm install ganache-cli@6.12.1 --save-dev \u0026gt; keccak@3.0.1 install /Users/anthonyalbertorio/Code/ethDev/yield-farm/node_modules/ganache-cli/node_modules/keccak \u0026gt; node-gyp-build || exit 0 \u0026gt; secp256k1@4.0.2 install /Users/anthonyalbertorio/Code/ethDev/yield-farm/node_modules/ganache-cli/node_modules/secp256k1 \u0026gt; node-gyp-build || exit 0 npm WARN yield-farm@1.0.0 No description npm WARN yield-farm@1.0.0 No repository field. + ganache-cli@6.12.1 added 101 packages from 182 contributors and audited 245 packages in 5.82s 37 packages are looking for funding run `npm fund` for details found 0 vulnerabilities To Install Ganache GUI, go to their website and follow the instructions. The GUI will allow you to have an interactive desktop app that runs your local Ethereum blockchain.\nInitalize Truffle a Project To initialize a Truffle project run the following command\n$ truffle init  Truffle init sets up the project structure for your project\n $ truffle init Starting init... ================ \u0026gt; Copying project files to /YOUR/ABSOLUTE/PATH/VARIES/yield-farm Init successful, sweet! Success! We have Installed all our initial dependenices and setup the project!\nQuick Start Setup If you want to quickly set up a project, folow the instructions below.\n Check to have NodeJS v10.0 or higher. Or install it. Navigate into a directory to create your repo Follow commands below  $ mkdir yield-farm $ cd yield-farm $ npm init - y $ npm install truffle@5.1.59 --save-dev $ npm install ganache-cli@6.12.1 --save-dev $ truffle init $ touch .gitignore Understanding the Project Structure We now have the basic ingredients for a Truffle Project.\nWe will explain the following parts:\n the Truffle Project Structure package.json package-lock.json /node_modules truffle.config.js and configuration /contracts and Migrations.sol Contract /migrations and migration scripts /tests and testing  Don\u0026rsquo;t be intimidated. The files have very simple functions. 😃\nTruffle Project Structure Thanks to running truffle init command, we created the scaffolding to build our project.\nThis is the basics to get started. Below is a description of each part and what it does.\n├──contracts │ └──Migrations.sol ├──migrations │ └──1_initial_migration.js ├──node_modules │ └──VARIOUS SUB-FOLDERS ├──test ├──package-lock.json ├──package.json ├──.gitignore └──truffle-config.js Overview of package.json package.json is the file that lists our dependencies for our project. It is also used for defining project properties, description, author \u0026amp; license information, scripts, etc.\nWhenever we install something using npm, it is listed here. That way other devs can download our project and run npm i and install the same modules. We do not need to commit our ./node_modules folder to our github repos.\nSee the package.json npm documentation for more information.\nWhat is package-lock.json? package-lock.json is solely used to lock dependencies to a specific version number. Since dependencies can have version updates. If included in a project, package-lock.json get the exact version during installation.\nIt is automatically generated for any operations where npm modifies either the node_modules tree, or package.json.\nSee the package-lock.json npm documentation for more information.\nWhat is node_modules ./node_modules is the directory where all our dependencies go when we install them via npm.\nThe main important thing to know is: NEVER MODIFY ANY FILES OR FOLDERS INSIDE OF NODE MODULES\nWhy? Its a poor practice. Your ./node_modules files will be different than what others download via npm. It will inevitably cause bugs and issues. This is a general rule that applies to any projects using NodeJS or npm.\nConfigurations with truffle.config.js Contracts and Migrations Overview of Migrations Scripts Tests and Test Driven Development Security and The Importance of Tests ./test "},{"uri":"https://EthBuilders.github.io/Curriculum/basics/support/","title":"","tags":[],"description":"","content":"EthBuilders Curriculum Support Table of Contents  EthBuilders Curriculum Support  Table of Contents Project Contact Info  Anthony A (Organizer | Developer) Edward Amor (Developer)   Common Commands  Bash Terminal  Show Directory Information Navigate Directories Manipulate Files Display Files   Git  Git Information Make Changes Commit Changes Update the Repo Delete Branch   Yarn | NPM   Set Up Instructions  macOS and Linux Setup Windows Setup   Accesssing Command Line  Via macOS Via Windows   General Resources and Links  Git / Github      Project Contact Info Join our Slack\nAnthony A (Organizer | Developer)  Github: @tesla809 Slack: @Anthony_Albertorio_NEVER_ASKS_FOR_COIN   Edward Amor (Developer)  Github: @skellet0r Slack: @Edward Amor  Common Commands Bash Terminal Show Directory Information   pwd - print working directory - show your current absolute directory path\n  ls - list documents in directory\n  ls -a - list ALL including hidden ones (like .gitignore or .env)\n  Navigate Directories   cd - go directly to computer\u0026rsquo;s root\n  cd ./ - stay in same directory\n  cd ../ - go up one directory\n  cd ../../ - go up two directories. Note continue to add ../ to go up 1 directory\n  Manipulate Files   touch \u0026lt;FILENAME\u0026gt; - create a new file\n  rm \u0026lt;FILENAME\u0026gt; - remove file. Note: file is immediately deleted and does not go to trash bin\n  mkdir \u0026lt;NAME\u0026gt; - create a new directory\n  mv \u0026lt;FILENAME\u0026gt; \u0026lt;NEW DIRECTORY\u0026gt; - move file to new directory\n  mv \u0026lt;OLD FILENAME\u0026gt; \u0026lt;NEW FILENAME\u0026gt; - rename file\n  rmdir \u0026lt;NAME\u0026gt; - remove an empty directory\n  DO IT VIA GUI to avoid costly mistakes - remove non-empty directory\n  Display Files  cat \u0026lt;FILENAME\u0026gt; - display file in terminal man \u0026lt;COMMAND\u0026gt; - see the command\u0026rsquo;s manual q - exit program - like man or cat  Git Git Information   git status - Show the working tree status\n  git log- show the current HEAD and its ancestry\n  git log --pretty=format:\u0026quot;%h %s\u0026quot; --graph - show the current HEAD and its ancestry with formatting\n  git reflog- show an ordered list of the commits that HEAD has pointed to (a local undo history for your repo - reference)\n  git branch -a - show all branches\n  git remote -v - list remote repositories\n  git diff- show line-by-line changes in your branch compared to master\n  Make Changes   git checkout -b \u0026lt;branch\u0026gt;- Create new branch to make changes\n  git checkout \u0026lt;branch\u0026gt;- Checkout branch to make changes\n  git mv \u0026lt;old-file\u0026gt; \u0026lt;new-file\u0026gt;- Change file name\n  git rm \u0026lt;file\u0026gt;- Delete file\n  Commit Changes   atom \u0026lt;filename\u0026gt; (or text editor of your choice) - Make changes to the file\n  git add \u0026lt;filename\u0026gt; - Add a single file with changes\n  git add -A - Add all files with changes\n  git commit -m \u0026quot;Commit Message\u0026quot; - Commit the change with a message\n  git commit -am \u0026quot;Commit Message\u0026quot; - Add all files and commit the change in one command\n  git commit --amend - Modify last commit message\n  git push origin - Push change to repository (on Github)\n  Update the Repo   git remote add upstream \u0026lt;clone-link\u0026gt; - Setting an upstream repository\n  git checkout master - Check out the master branch\n  git fetch upstream \u0026lt;branch\u0026gt; - Fetch branch from the upstream repository\n  git rebase upstream/\u0026lt;branch\u0026gt; - Rebase changes from the upstream repository\n  git push origin - Push changes to the origin repository\n  Delete Branch   git push origin -d \u0026lt;branch\u0026gt; - Delete the branch from origin\n  git branch -d \u0026lt;branch\u0026gt; - Delete the branch from local\n  Yarn | NPM Full list of yarn commands Full list of npm commands\nyarn install\nnpm i\n Install all node modules Yarn - more info npm - more info  yarn add \u0026lt;package-name\u0026gt;\nnpm install \u0026lt;package-name\u0026gt;\n Installs a package and any packages that it depends on Yarn - more info npm - more info  yarn remove \u0026lt;package-name\u0026gt;\nnpm uninstall \u0026lt;package-name\u0026gt;\n Removes an unused package from your current package.json Yarn - more info npm - more info  yarn init\nnpm init\n Initializes the development of a package. Yarn - more info npm - more info  yarn upgrade \u0026lt;package-name\u0026gt;@\u0026lt;verision\u0026gt;\nnpm update \u0026lt;package-name\u0026gt;@\u0026lt;verision\u0026gt;\n Upgrades packages to their latest version based on the specified range Yarn - more info npm - more info  Set Up Instructions macOS and Linux Setup The Bash based terminal already comes pre-installed with UNIX based systems like macOS and Linux, so there is nothing to set up.\nWindows Setup TBD\nAccesssing Command Line Via macOS  Hold down Spacebar + Command for Spotlight search Type Terminal Enter Voila!  Place the terminal link where you find best to access.\nVia Windows TBD\nGeneral Resources and Links Git / Github Git Resources\n Git Offical Docs: Git Command Reference Git Tower: Learn Version Control with Git Git Tower: What is a rebase in Git? Git Tower: rebase as an alternative to merge Atlassian: Overview of rebase Github Help: How to use rebase Learning Git Branching A successful Git branching model Oh Shit, Git!?! with real problems and solutions   ⚠️ 👀 WARNING: You should use rebase only for squashing YOUR local commits prior to a pull request. DO NOT ever rebase commits that have already been published to master. This will rewrite our public project\u0026rsquo;s history. This applies to maintainers of the project.\n Github Workflow Resources\n Github Guides: Understanding the GitHub flow GitHub Standard Fork \u0026amp; Pull Request Workflow (Chaser324) Digital Ocean: How To Create a Pull Request on GitHub Mozilla Servo: Beginner\u0026rsquo;s guide to rebasing and squashing  "},{"uri":"https://EthBuilders.github.io/Curriculum/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://EthBuilders.github.io/Curriculum/tags/","title":"Tags","tags":[],"description":"","content":""}]